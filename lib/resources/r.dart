/// THIS FILE IS GENERATED BY r_resources. DO NOT MODIFY MANUALLY.

// ignore_for_file: avoid_classes_with_only_static_members,always_specify_types,lines_longer_than_80_chars,non_constant_identifier_names,prefer_double_quotes,unnecessary_raw_strings,use_raw_strings

import 'package:flutter/material.dart';

class R {
  static const images = _ImageResources();
  static const svg = _SvgResources();
  static _Strings stringsOf(BuildContext context) => _Strings.of(context);
}

class _ImageResources {
  const _ImageResources();
}

class _SvgResources {
  const _SvgResources();
}

class _Strings {
  const _Strings(this.locale);

  static const _fallbackLocale = Locale('ru');
  final Locale locale;

  static _Strings of(BuildContext context) {
    return Localizations.of<_Strings>(context, _Strings)!;
  }

  static const Map<String, Map<String, String>> _localizedValues = {
    'en': {
      'settings': 'Settings',
      'dark_mode': 'Dark mode',
      'change_language': 'Change language',
      'high_contrast_mode': 'High contrast mode',
      'how_to_play': 'How to play',
      'enter': 'enter',
      'wordle': 'wordle',
    },
    'ru': {
      'settings': 'Настройки',
      'dark_mode': 'Темная тема',
      'change_language': 'Сменить язык',
      'high_contrast_mode': 'Режим повышенной контрастности',
      'how_to_play': 'Как играть',
      'enter': 'ввод',
      'wordle': 'словень',
    },
  };

  String _getString(String code) {
    return _localizedValues[locale.toString()]?[code] ??
        _localizedValues[_fallbackLocale.toString()]?[code] ??
        code;
  }

  /// 'Настройки'
  String get settings => _getString('settings');

  /// 'Темная тема'
  String get dark_mode => _getString('dark_mode');

  /// 'Сменить язык'
  String get change_language => _getString('change_language');

  /// 'Режим повышенной контрастности'
  String get high_contrast_mode => _getString('high_contrast_mode');

  /// 'Как играть'
  String get how_to_play => _getString('how_to_play');

  /// 'ввод'
  String get enter => _getString('enter');

  /// 'словень'
  String get wordle => _getString('wordle');
}

class RStringsDelegate extends LocalizationsDelegate<_Strings> {
  const RStringsDelegate();

  static const supportedLocales = [
    Locale('en'),
    Locale('ru'),
  ];

  static const fallbackLocale = Locale('ru');

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  Future<_Strings> load(Locale locale) async {
    return _Strings(locale);
  }

  @override
  bool shouldReload(covariant LocalizationsDelegate<_Strings> old) => false;
}
